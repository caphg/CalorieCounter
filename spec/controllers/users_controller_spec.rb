require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe Devise::RegistrationsController, :type => :controller do

  let!(:valid_attributes) {
    {email: "newuser@user.com", password: "12345678", password_confirmation: "12345678", daily_calories: "1234"}
  }

  before {@request.env["devise.mapping"] = Devise.mappings[:user]}

  describe "POST create" do
    describe "with valid params" do
      it "creates a new User" do
        expect {
          post :create, {:user => valid_attributes}
        }.to change(User, :count).by(1)
      end

    end

    describe "with invalid params" do
      it "does not create a new user" do
        expect{
          post :create, {:user => {email: "notanemail", password:"12345678", password_confirmation:"12345678"}}
        }.to_not change(User, :count)
      end

      it "does not create a new user" do
        expect{
          post :create, {:user => {email: "email@email.com", password:"12345678", password_confirmation:"not_the_same"}}
        }.to_not change(User, :count)
      end

    end
  end

end


RSpec.describe UsersController, :type => :controller do
  describe "/PATCH update" do
    describe "with valid params" do
      let!(:new_user) {FactoryGirl.create(:user, daily_calories: 1000)}

      it "updates the requested user" do
        sign_in new_user
        expect {patch :update, id: new_user.id, user: {daily_calories: "3000"} , :format => :json}.
            to change{new_user.reload.daily_calories}.from(1000).to(3000)
      end

      it "does not update token on change" do
        sign_in new_user
        expect {patch :update, id: new_user.id, user: {daily_calories: "3000"} , :format => :json}.
            to_not change{new_user.reload.auth_token}
      end
    end
  end
end